简单写一下吧
## 内存与磁盘
内存有限，数据不够存储，只能用廉价的硬盘，但是io的时候会产生很大的开销
## 文件 页和 记录
关系数据库的基本数据单元是记录（行），这些记录被组织成关系（表），可以在内存中修改、删除、搜索或创建。磁盘的数据基本单元是页，它是从磁盘到内存以及反向传输的最小单位。
为了以与磁盘兼容的格式表示关系数据库，每个关系存储在自己的文件中，记录则在文件中组织成页。数据库根据关系的模式和访问模式来确定
（1）使用的文件类型，(2）页在文件中的组织方式，(3）每页上记录的组织方式，以及（4）每条记录的格式。

## 选择文件类型
主要有两种文件类型：堆文件和排序文件。
对于每个关系，数据库根据访问模式的I/O成本选择使用哪种文件类型。1个I/O等于从磁盘读取1页或向磁盘写入1页，I/O计算基于访问模式中的插入、删除和扫描操作。
选择产生较低I/O成本的文件类型。

## 堆文件
堆文件是一种文件类型，其页和页内记录没有特定的排序，主要有两种实现方式。第一种是简单的链表结构，记录按插入顺序存储；第二种是使用空闲列表来管理可用空间。

### 链表实现
在链表实现中，每个数据页包含记录、空闲空间跟踪器和指向下一页及上一页的指针（字节偏移量）。有一个头页作为文件的起始点，将数据页分为满页和空页。当需要空间时，会分配空页并将其添加到空页列表中。当空数据页变满时，它们会从空闲部分移到满页列表的前面，以避免遍历整个满页部分。另一种选择是在头页中保持指向该列表末尾的指针，但具体使用哪种实现对本课程并不重要。
> 当然选择第二种是更加明智的选择，可以把头页放到ram中然后这样可以更快的找到到底需要的空间了

### 页目录实现
页目录实现与链表实现的主要区别在于仅对头页使用链表。
每个头页包含指向下一个头页的指针，并且其条目同时包含指向数据页的指针和该数据页中剩余的空闲空间量。
由于头页的条目存储了每个数据页的指针，数据页本身不再需要存储相邻页的指针。
页目录实现的主要优势在于插入记录通常更快，因为只需读取所有头页，而链表实现可能需要读取头页和每个空闲部分的页。尽管堆文件的插入速度比排序文件快，但在堆文件中搜索记录时需要对每一页的所有记录进行完整扫描，导致每次搜索的I/O成本为线性N。我们会看到，排序文件在搜索记录方面要好得多。由于记录是按照某种顺序存储的，排序文件可以使用更高效的查找算法（例如二分查找），从而显著减少所需的I/O操作。因此，在需要频繁检索数据的场景中，排序文件更具优势。
## 排序文件
排序文件是一种文件类型，其中页是有序的，且每页内的记录按键值排序。这些文件使用页目录实现，并根据记录的排序对数据页施加顺序。在搜索排序文件时，使用二分查找可以在 logN 的I/O中找到包含记录的页（N为页数）。然而，插入操作在平均情况下需要 logN + N 的I/O，因为需要二分查找以找到写入的页，而插入的记录可能导致后续所有记录向后推移。在平均情况下，约 N/2 页需要被推后，这涉及到每个页的读取和写入I/O，导致N的I/O开销。在下面的例子中，假设每个数据页最多存储2条记录，因此在数据页1中插入记录时，需读取并写入所有后续页。
## 关于计数头页的说明
在计算操作的I/O成本时，常常会对是否考虑访问头页的成本产生困惑。对于本课程中仅指定文件为堆文件或排序文件而未提供具体实现的问题，您应忽略与读取/写入文件头页相关的I/O成本。然而，对于提供具体文件实现的问题（即使用链表或页目录实现的堆文件），则必须包括与读取/写入文件头页相关的I/O成本。
## 记录类型
记录类型完全由关系的模式决定，分为两种类型：固定长度记录（FLR）和可变长度记录（VLR）。FLR仅包含固定长度的字段（如整数、布尔值、日期等），相同模式的FLR由相同数量的字节组成。而VLR则包含固定长度和可变长度字段（例如，varchar），导致相同模式的每个VLR可能具有不同的字节数。VLR将所有固定长度字段存储在可变长度字段之前，并使用记录头存储指向可变长度字段末尾的指针。

无论格式如何，每条记录都可以通过其记录ID唯一标识——[页号，页内记录号]。
## 页面格式

### 固定长度记录的页面
包含FLR的页面总是使用页面头存储当前页面上的记录数量。如果页面是紧凑的，记录之间没有间隙，这使得插入变得简单，我们可以通过现有记录的数量和每条记录的长度计算出下一个可用位置。一旦计算出该值，我们就可以在计算的偏移量处插入记录。删除稍微复杂一些，因为需要将删除记录后的所有记录向前移动一个位置以保持页面的紧凑性。

如果页面是松散的，页面头通常会存储一个附加的位图，将页面分成多个插槽，并跟踪哪些插槽是空的或已占用。使用位图进行插入时，需要找到第一个空位，设置新记录到相应的插槽中，然后更新该插槽的位。删除时，清除已删除记录对应的位，以便未来的插入可以覆盖该插槽。

### 可变长度记录的页面
可变长度记录与固定长度记录的主要区别在于，无法保证每条记录的大小。为了解决这个问题，每个页面使用页面底部的页脚来维护插槽目录，跟踪插槽计数、空闲空间指针和条目。页脚位于页面底部，以便在插入记录时插槽目录有空间增长。

插槽计数跟踪总插槽数，包括已填充和空闲插槽。空闲空间指针指向页面内下一个空闲位置。插槽目录中的每个条目由[记录指针，记录长度]对组成。

如果页面是松散的，删除时需要在插槽目录中找到记录的条目，将记录指针和记录长度设置为null。未来插入时，记录将插入到空闲空间指针处，并在任何可用的null条目中设置新的[指针，长度]对。如果没有可用的null条目，则在插槽目录中为该记录添加新条目，使用插槽计数确定新插槽条目的偏移位置，然后递增插槽计数。定期将记录重新组织为紧凑状态，以便为未来插入腾出空间。

如果页面是紧凑的，删除涉及在插槽目录中移除记录的条目。此外，删除记录后面的所有记录必须向页面顶部移动一个位置，插槽目录中的相应条目也需向页面底部移动一个位置。插入时，如果所有插槽都已满，则每次都在空闲空间指针处插入记录并添加新条目。